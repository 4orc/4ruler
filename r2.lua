---  ____        __                           
--- /\  _`\     /\ \__                        
--- \ \ \L\ \   \ \ ,_\   __  __  __    ___   
---  \ \ ,  /    \ \ \/  /\ \/\ \/\ \  / __`\ 
---   \ \ \\ \    \ \ \_ \ \ \_/ \_/ \/\ \L\ \
---    \ \_\ \_\   \ \__\ \ \___x___/'\ \____/
---     \/_/\/ /    \/__/  \/__//__/   \/___/ 
---                                           

local b4={}; for k,v in pairs(_ENV) do b4[k]=v end
local the={file    = "../data/auto93.csv",
           seed    = 10019,
           repeats = 256,
           bins    = 6/.35}
--------------------------------------------------------------------------------
-- ## Library
-- ### Maths
local big
big=math.huge

-- ### Strings to Things
local coerce,csv
function coerce(s) --> any; return int or float or bool or string from `s`
  local function fun(s1)
    if s1=="true"  then return true  end
    if s1=="false" then return false end
    return s1 end
  return math.tointeger(s) or tonumber(s) or fun(s:match"^%s*(.-)%s*$") end

function csv(sFilename,fun) --> nil; call `fun` on rows (after coercing cell text)
  local src,s,t  = io.input(sFilename)
  while true do
    s = io.read()
    if   s
    then t={}; for s1 in s:gmatch("([^,]+)") do t[1+#t]=coerce(s1) end; fun(t)
    else return io.close(src) end end end

-- ### Lists
local any,push,map,keys,gt,lt,sort
function any(t)
  return t[math.random(#t)] end

function push(t, x) --> any; push `x` to end of list; return `x` 
  table.insert(t,x); return x end

function map(t, fun) --> t; map function `fun`(v) over list (skip nil results) 
  local u={}; for i,v in pairs(t)do u[1+#u]=fun(v) end;return u end

function keys(t) --> t; sort+return `t`'s keys (ignore things with leading `_`)
  local function want(k,x) if tostring(k):sub(1,1) ~= "_" then return k end end
  local u={}; for k,v in pairs(t) do if want(k) then u[1+#u] = k end end
  return sort(u) end

function lt(x)
  return function(a,b) return a[x] < b[x] end end

function gt(x)
  return function(a,b) return a[x] > b[x] end end

function sort(t,fun)
  table.sort(t,fun); return t end

-- ### Printing
local fmt,oo,o
function fmt(sControl,...) --> str; emulate printf
  return string.format(sControl,...) end

function oo(t) --> t; print `t`'s string (the one generated by `o`)
  print(o(t)); return t end

function o(t,  seen) --> str; table to string (recursive)
  if type(t) ~= "table" then return tostring(t) end
  seen = seen or {}
  if seen[t] then return fmt("...") end
  seen[t] = t
  local function filter(k) return fmt(":%s %s",k,o(t[k],seen)) end
  local u = #t>0 and map(t,tostring) or map(keys(t),filter)
  return "{".. table.concat(u," ").."}" end
--------------------------------------------------------------------------------
-- ## Objects
local NUM,SYM,COLS,DATA
function NUM(n,s) 
  return {at=n or 0, txt=s or "", nump=true,
          p={},
          w=(s or ""):find"-$" and -1 or 1,
          lo=big, hi=-big} end

function SYM(n,s)
  return {at=n or 0, txt=s or "", p={}} end

function COLS(t)
  local all,x,y = {},{},{} 
  for n,s in pairs(t) do 
    local col = push(all, s:find"^[A-Z]+" and NUM(n,s) or SYM(n,s))
    if not s:find"X$" then
      push(s:find"[!+-]$" and y or x, col) end end 
  return {names=t, all=all, x=x, y=y}  end
      
function DATA(t)
  return {rows={}, cols=COLS(t)} end
--------------------------------------------------------------------------------
local norm,data,row,discretize,better
function norm(num,x)
  return (num.hi - num.lo) < 1E-9 and 0 or (x - num.lo)/(num.hi - num.lo) end

function better(row1,row2,data)
  local s1,s2,n,x,y = 0,0,#data.cols.y
  for _,col in pairs(data.cols.y) do
    x  = norm(col, row1[col.at])
    y  = norm(col, row2[col.at])
    s1 = s1 - math.exp(col.w * (x-y)/n)
    s2 = s2 - math.exp(col.w * (y-x)/n) end
  return s1/n < s2/n end

function discretize(col,x) --> num; discretize `Num`s,rounded to (hi-lo)/bins
  if not col.nump then return x else
    local tmp = (col.hi - col.lo)/(the.bins - 1)
    return col.hi == col.lo and 1 or math.floor(x/tmp + .5)*tmp end end

function row(data,t)
  push(data.rows, t)
  for _,cols in pairs{data.cols.x, data.cols.y} do
    for _,col in pairs(cols) do
      local x = t[col.at]
      if x ~= "?" then
        if col.nump then col.lo = math.min(x, col.lo)
                         col.hi = math.max(x, col.hi) end end end end end

function data(src)
  local data1
  local function add(t) if not data1 then data1=DATA(t) else row(data1,t) end end
  csv(src, add) 
  return data1 end
--------------------------------------------------------------------------------
local bins,merge,merges,rewards,reward
function merge(xy1,xy2)
  local min = 1/the.bins
  if xy2 then
    if xy1.p<min or xy2.p<min then
      return {txt=xy1.txt,at=xy1.at, 
              lo=xy1.lo, hi=xy2.hi, p=xy1.p + xy2.p}  end end end

function merges(b4)
  local now,j={},1
  while j <= #b4 do
    local xy1,xy2 = b4[j],b4[j+1]
    merged        = merge(xy1,xy2)
    now[1+#now]   = merged or xy1
    j             = j + (merged and 2 or 1) end 
  return #now == #b4 and b4 or merges(now) end 

function bins(col)
  local xy = {}
  for x,p in pairs(col.p) do 
    push(xy,{lo=x,hi=x,at=col.at, txt=col.txt, p=p}) end
  xy= sort(xy,lt"lo") 
  if col.nump then
    for j=2,#xy do xy[j-1].hi = xy[j].lo end
    xy[1  ].lo = -big
    xy[#xy].hi =  big
  end
  return #xy > 1 and xy or {}  end

function reward(row,data)
  for _,col in pairs(data.cols.x) do
    local x = row[col.at]
    if x ~= "?" then 
      local v = discretize(col,x)
      col.p[v] = 1/the.repeats + (col.p[v] or 0) end end end

function rewards(data)
  for _,col in pairs(data.cols.x) do
    if col.nump then
      for x = col.lo, col.hi, (col.hi - col.lo)/the.bins do 
        col.p[discretize(col,x)]=0 end end end
  for j=1,the.repeats do
    local row1, row2 = any(data.rows), any(data.rows)
    reward( better(row1,row2,data) and row1 or row2, data) end end

--------------------------------------------------------------------------------
local eg={}
function eg.data() data(the.file) end
function eg.rewards(data1)
  data1=data(the.file)
  oo(data1.cols.x) 
  rewards(data1)
  local tmp ={}
  for _,col in pairs(data1.cols.x) do
    for _,x in pairs(merges(bins(col))) do push(tmp,x) end end
  for _,x in pairs(sort(tmp,gt"p")) do oo(x) end end


math.randomseed(the.seed)
eg.rewards()
for k,v in pairs(_ENV) do if not b4[k] then print("#W",k,type(v)) end end 
